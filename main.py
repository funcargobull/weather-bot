from config import BOT_TOKEN
from functions import *
from telegram.ext import Application, MessageHandler, filters, CallbackQueryHandler, CommandHandler
from telegram.error import BadRequest
from markups import *
from data.manager import DBManager
from message import Message
from all_respons import RequestsApi
import datetime


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update, context):
    if not DBManager(str(update.effective_user.id)).get_setting_period():
        f = open("cities2.txt", encoding="utf-8")
        check = check_if_city(update.message.text, f.readlines())
        f.close()
        if check[0]:
            manager = DBManager(str(update.effective_user.id))
            manager.put_user({"current_city": check[1]})
            await update.message.reply_text(
                f"""
üåÜ –í—ã–±—Ä–∞–Ω –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: <b>{check[1]}</b>
–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å?
                """,
                parse_mode="HTML",
                reply_markup=markup_city
            )
        else:
            await update.message.reply_text(
                f"""
üò≠ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ç–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ <b>–Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>
–ï—Å–ª–∏ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–≤–µ–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add [–Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤ <b>–Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ</b>]
                        """,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="main_menu")]])
            )
    else:
        text = update.message.text
        if DBManager(str(update.effective_user.id)).get_time_repeat() is None:
            try:
                h, m = map(int, text.split(":"))
                date = datetime.time(h, m, 0, 0)

                manager = DBManager(str(update.effective_user.id))
                manager.put_user({"time_repeat": f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {h}:{m} UTC"})
                job = context.job_queue.run_daily(period_forecast, time=date, days=(0, 1, 2, 3, 4, 5, 6),
                                                  user_id=update.effective_user.id)
                DBManager(str(update.effective_user.id)).put_user({"setting_period": False, "job_id": job.id})
                await update.message.reply_text("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                           callback_data="main_menu")]]))
            except ValueError:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞!")
                DBManager(str(update.effective_user.id)).put_user({"setting_period": False})
        else:
            time_repeat = DBManager(str(update.effective_user.id)).get_time_repeat()
            city = DBManager(str(update.effective_user.id)).get_city()
            await update.message.reply_text(
                f"‚ùå –£ –≤–∞—Å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ <b>{time_repeat}</b> –¥–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ <b>{city}</b>!",
                parse_mode="html")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
async def handle_photo(update, context):
    if not DBManager(str(update.effective_user.id)).get_setting_period():
        file = await context.bot.get_file(update.message.photo[-1].file_id)
        url = file.file_path
        result = ai_get_location(url)
        if result is not None:
            check = check_if_city(result, open("cities2.txt", encoding="utf-8").readlines())
            if check[0]:
                manager = DBManager(str(update.effective_user.id))
                manager.put_user({"current_city": check[1]})
                await update.message.reply_text(
                    f"""
üåÜ –í—ã–±—Ä–∞–Ω –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: <b>{check[1]}</b>
–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å?
                            """,
                    parse_mode="HTML",
                    reply_markup=markup_city
                )
            else:
                await update.message.reply_text(
                    f"""
üò≠ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ <b>–Ω–µ —É–¥–∞–ª–æ—Å—å</b>
–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /add [–Ω–∞–∑–≤–∞–Ω–∏–µ –≤ <b>–Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ</b>]
                        """,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="main_menu")]])
                )

        else:
            await update.message.reply_text("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
async def add(update, context):
    if context.args:
        args = " ".join([i.lower() for i in context.args])
        with open("cities2.txt", "a", encoding="utf-8") as f:
            f.write(f"\n{args}")
        await update.message.reply_text(
            f"‚úÖ –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
        )


# –°—Ç–∞—Ä—Ç
async def start(update, context):
    user = update.effective_user
    DBManager(str(update.effective_user.id)).put_user({"setting_period": False})

    await update.message.reply_animation(
        animation="CgACAgIAAxkBAAICPWYEQYZ2tp5GSg6pabmnvJqaX9YoAAI9QgAC80gpSGjYntGtKMlINAQ", caption=
        f"""
<b>üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!</b>
–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É (–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑) –≤ –í–∞—à–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ.
<b>üåé –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏ –ø–æ–≥–æ–¥—É –¥–ª—è —Å–≤–æ–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ üåé</b>
–ù–∞–ø—Ä–∏–º–µ—Ä, <i>–ú–æ—Å–∫–≤–∞</i> –∏–ª–∏ <i>–ø–æ–∫–∞–∂–∏ –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ</i>
<b>üß† –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ—Å—Ç–∞, –∏ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –µ–≥–æ –∏ –≤—ã–≤–µ–¥–µ—Ç –ø–æ–≥–æ–¥—É üß†</b>
<b>–î–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /cancel</b>
        """, parse_mode="HTML", reply_markup=markup_start
    )


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
async def period_forecast(context):
    manager = DBManager(str(context.job.user_id))
    city = manager.get_city()
    requ = RequestsApi()
    m = Message()
    coord = requ.get_geocoder(city)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
    msg = m.weather_message(requ.get_weather(coord['coord']))
    msg = f"üåç <b>–ü–æ–≥–æ–¥–∞ –¥–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ {city}</b> üåç\n\n" + msg
    await context.bot.send_message(text=msg, chat_id=context.job.user_id, parse_mode="HTML")


# –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
async def cancel(update, context):
    if DBManager(str(update.effective_user.id)).get_time_repeat() is not None:
        job_id = DBManager(str(update.effective_user.id)).get_job_id()
        for i in context.job_queue.jobs():
            if i.id == job_id:
                i.schedule_removal()
        await update.message.reply_text(
            "‚ùå –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–º–µ–Ω–µ–Ω!",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                       callback_data="main_menu")]])
        )
        DBManager(str(update.effective_user.id)).put_user({"time_repeat": None})
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑!",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                       callback_data="main_menu")]])
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–±–µ–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
async def callback_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if query.data == "main_menu":
        DBManager(str(update.effective_user.id)).put_user({"setting_period": False})
        user = update.effective_user

        await query.edit_message_text(
            f"""
<b>üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!</b>
–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É (–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑) –≤ –í–∞—à–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ.
<b>üåé –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏ –ø–æ–≥–æ–¥—É –¥–ª—è —Å–≤–æ–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ üåé</b>
–ù–∞–ø—Ä–∏–º–µ—Ä, <i>–ú–æ—Å–∫–≤–∞</i> –∏–ª–∏ <i>–ø–æ–∫–∞–∂–∏ –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ</i>
<b>üß† –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ—Å—Ç–∞, –∏ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –µ–≥–æ –∏ –≤—ã–≤–µ–¥–µ—Ç –ø–æ–≥–æ–¥—É üß†</b>
<b>–î–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /cancel</b>
                """, parse_mode="HTML", reply_markup=markup_start
        )
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    elif query.data == "period":
        if DBManager(str(update.effective_user.id)).get_city() is None:
            try:
                await query.edit_message_text(
                    """
‚ö†Ô∏è <b>–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞!</b>
–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–≥–æ–¥—É, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"üí° –°–¥–µ–ª–∞—Ç—å –≥–æ—Ä–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º"</b>
""", parse_mode="html",
                    reply_markup=InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]))
            except BadRequest:
                await update.effective_message.reply_text(
                    """
‚ö†Ô∏è <b>–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞!</b>
–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–≥–æ–¥—É, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"üí° –°–¥–µ–ª–∞—Ç—å –≥–æ—Ä–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º"</b>
""", parse_mode="html",
                    reply_markup=InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]))
        else:
            city = DBManager(str(update.effective_user.id)).get_city()
            DBManager(str(update.effective_user.id)).put_user({"setting_period": True})

            utcnow = datetime.datetime.utcnow()
            h_utc, m_utc = utcnow.hour, utcnow.minute

            try:
                await query.edit_message_text(
                    f"""
üèòÔ∏è –ì–æ—Ä–æ–¥: <b>{city}</b>
‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC <b>–ß–ß:–ú–ú</b> –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
üïí UTC –≤—Ä–µ–º—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{h_utc}:{m_utc}</b>
""", reply_markup=markup_period,
                    parse_mode="html"
                )
            except BadRequest:
                await update.effective_message.reply_text(
                    f"""
üèòÔ∏è –ì–æ—Ä–æ–¥: <b>{city}</b>
‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC <b>–ß–ß:–ú–ú</b> –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
üïí UTC –≤—Ä–µ–º—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{h_utc}:{m_utc}</b>
""", reply_markup=markup_period,
                    parse_mode="html"
                )
    # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤—ã–±—Ä–∞–ª "–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞"
    elif query.data == "every_3_hours":
        if DBManager(str(update.effective_user.id)).get_time_repeat() is None:
            manager = DBManager(str(update.effective_user.id))
            if manager.get_setting_period():
                manager.put_user({"time_repeat": "–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞"})
                job = context.job_queue.run_repeating(period_forecast, interval=10800, first=10800,
                                                      user_id=update.effective_user.id)
                DBManager(str(update.effective_user.id)).put_user({"setting_period": False, "job_id": job.id})
                await query.edit_message_text("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                           callback_data="main_menu")]]))
        else:
            time_repeat = DBManager(str(update.effective_user.id)).get_time_repeat()
            city = DBManager(str(update.effective_user.id)).get_city()
            await query.edit_message_text(
                f"‚ùå –£ –≤–∞—Å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ <b>{time_repeat}</b> –¥–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ <b>{city}</b>!",
                parse_mode="html", reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                           callback_data="main_menu")]]))
    # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –¥–Ω—è–º
    elif query.data == "everyday_forecast":
        await query.edit_message_text(
            """
üìÖ –í—ã–±—Ä–∞–Ω <b>–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –¥–Ω—è–º</b>
–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑?
            """, reply_markup=markup_everyday_forecast, parse_mode="HTML"
        )
    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é
    elif query.data == "back_to_city":
        await query.edit_message_text(
            f"""
üåÜ –í—ã–±—Ä–∞–Ω –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: <b>{DBManager(str(update.effective_user.id)).get_current_city()}</b>
–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å?
                    """,
            parse_mode="HTML",
            reply_markup=markup_city
        )
    # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑
    elif query.data == "weather_now":
        manager = DBManager(str(update.effective_user.id))
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥
        city = manager.get_current_city()
        requ = RequestsApi()
        m = Message()
        try:
            coord = requ.get_geocoder(city)
            # –ò —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
            msg = m.weather_message(requ.get_weather(coord['coord']))
            await query.edit_message_text(msg, parse_mode="HTML",
                                          reply_markup=InlineKeyboardMarkup(
                                              [[InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è",
                                                                     callback_data="back_to_city")]]))

        except (IndexError, TypeError) as e:
            await query.edit_message_text("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="HTML")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–Ω—è–º
    elif "day" in query.data:
        time = int(query.data[0])

        requ = RequestsApi()
        m = Message()
        try:
            coord = requ.get_geocoder(DBManager(str(update.effective_user.id)).get_current_city())
            forecast = m.weather_forecast_message(requ.get_weather(coord['coord'], forecast=True, time=time))
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –≤ –ë–î –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
            DBManager(str(update.effective_user.id)).put_user({"current_forecast": forecast, "current_index": 0})

            # –ü–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –µ–≥–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            first_forecast = forecast["list"][0]
            # –†–∞–∑–ª–∏—á–∏–µ —Å UTC –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            timezone = forecast["city"]["timezone"]

            first_date, first_time = first_forecast["dt_txt"].split()
            first_date = list(map(int, first_date.split("-")))  # [–≥–æ–¥, –º–µ—Å—è—Ü, —á–∏—Å–ª–æ]
            first_time = list(map(int, first_time.split(":")))  # [—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã]

            total_date = datetime.datetime(first_date[0], first_date[1], first_date[2], first_time[0], first_time[1],
                                           first_time[2], 0) + datetime.timedelta(seconds=int(timezone))
            total_date = total_date.strftime("%d.%m.%Y %H:%M")
            first_date, first_time = total_date.split()

            markup = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton(text=first_date, callback_data="0")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="previous"),
                     InlineKeyboardButton(text=first_time, callback_data="0"),
                     InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="next")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_city")]
                ]
            )
            await query.edit_message_text(
                m.weather_forecast_message_normalized(
                    DBManager(str(update.effective_user.id)).get_current_forecast()["list"], 0),
                parse_mode="HTML", reply_markup=markup)
        except (IndexError, TypeError) as e:
            await query.edit_message_text("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="HTML")
    # –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥" –∏ "–Ω–∞–∑–∞–¥"
    elif query.data == "previous" or query.data == "next":
        DBManager(str(update.effective_user.id)).put_user({"setting_period": False})
        current_index = DBManager(str(update.effective_user.id)).get_current_index()
        forecast_ = DBManager(str(update.effective_user.id)).get_current_forecast()
        if current_index - 1 < 0 and query.data == "previous":
            pass
        elif current_index + 1 == len(forecast_["list"]) and query.data == "next":
            pass
        else:
            m = Message()
            # –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–≥–Ω–æ–∑–∞, –∞ –ø–æ—Ç–æ–º –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–µ–º—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            if query.data == "previous":
                DBManager(str(update.effective_user.id)).put_user({"current_index": current_index - 1})
            else:
                DBManager(str(update.effective_user.id)).put_user({"current_index": current_index + 1})

            # –ü—Ä–æ–≥–Ω–æ–∑, –µ–≥–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            forecast = forecast_["list"][DBManager(str(update.effective_user.id)).get_current_index()]
            # –†–∞–∑–ª–∏—á–∏–µ —Å UTC –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            timezone = forecast_["city"]["timezone"]

            date, time = forecast["dt_txt"].split()
            date = list(map(int, date.split("-")))  # [–≥–æ–¥, –º–µ—Å—è—Ü, —á–∏—Å–ª–æ]
            time = list(map(int, time.split(":")))  # [—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã]

            total_date = datetime.datetime(date[0], date[1], date[2], time[0],
                                           time[1],
                                           time[2], 0) + datetime.timedelta(seconds=int(timezone))
            total_date = total_date.strftime("%d.%m.%Y %H:%M")
            date, time = total_date.split()

            markup = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton(text=date, callback_data="0")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="previous"),
                     InlineKeyboardButton(text=time, callback_data="0"),
                     InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="next")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_city")]
                ]
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.edit_message_text(
                m.weather_forecast_message_normalized(
                    DBManager(str(update.effective_user.id)).get_current_forecast()["list"],
                    DBManager(str(update.effective_user.id)).get_current_index()),
                parse_mode="HTML", reply_markup=markup)

    # –°–¥–µ–ª–∞—Ç—å –≥–æ—Ä–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º
    elif query.data == "make_city_main":
        user = DBManager(str(update.effective_user.id))
        current_city = user.get_current_city()
        user.put_user({"city": current_city})
        await query.edit_message_text(
            f"‚úÖ –ì–æ—Ä–æ–¥ <b>{current_city}</b> –±—ã–ª –≤—ã–±—Ä–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞!",
            parse_mode="HTML", reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è",
                                       callback_data="back_to_city")]])
        )


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
    photo_handler = MessageHandler(filters.PHOTO, handle_photo)
    callback = CallbackQueryHandler(callback_handler)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(callback)
    application.add_handler(text_handler)
    application.add_handler(photo_handler)

    application.run_polling()


if __name__ == '__main__':
    main()
